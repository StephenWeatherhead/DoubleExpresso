//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DELexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DELexer : Lexer
{
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Number=1, Identifier=2, PLUS=3, MINUS=4, MULT=5, DIV=6, OPEN_PARENS=7, 
		CLOSE_PARENS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Number", "Identifier", "PLUS", "MINUS", "MULT", "DIV", "OPEN_PARENS", 
		"CLOSE_PARENS", "LetterOrDigit", "Digits", "Letter"
	};


	public DELexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DELexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Number", "Identifier", "PLUS", "MINUS", "MULT", "DIV", "OPEN_PARENS", 
		"CLOSE_PARENS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DELexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DELexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,3,0,25,8,0,1,0,1,0,1,0,1,0,1,0,3,
		0,32,8,0,1,0,3,0,35,8,0,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,3,8,58,8,8,1,9,1,9,5,9,62,
		8,9,10,9,12,9,65,9,9,1,9,3,9,68,8,9,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,0,19,0,21,0,1,0,2,1,0,48,57,2,0,65,90,97,122,74,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,1,34,1,0,0,0,3,36,1,0,0,0,5,43,1,0,0,0,7,45,
		1,0,0,0,9,47,1,0,0,0,11,49,1,0,0,0,13,51,1,0,0,0,15,53,1,0,0,0,17,57,1,
		0,0,0,19,59,1,0,0,0,21,69,1,0,0,0,23,25,5,45,0,0,24,23,1,0,0,0,24,25,1,
		0,0,0,25,26,1,0,0,0,26,27,3,19,9,0,27,28,5,46,0,0,28,29,3,19,9,0,29,35,
		1,0,0,0,30,32,5,45,0,0,31,30,1,0,0,0,31,32,1,0,0,0,32,33,1,0,0,0,33,35,
		3,19,9,0,34,24,1,0,0,0,34,31,1,0,0,0,35,2,1,0,0,0,36,40,3,21,10,0,37,39,
		3,17,8,0,38,37,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,4,
		1,0,0,0,42,40,1,0,0,0,43,44,5,43,0,0,44,6,1,0,0,0,45,46,5,45,0,0,46,8,
		1,0,0,0,47,48,5,42,0,0,48,10,1,0,0,0,49,50,5,47,0,0,50,12,1,0,0,0,51,52,
		5,40,0,0,52,14,1,0,0,0,53,54,5,41,0,0,54,16,1,0,0,0,55,58,3,21,10,0,56,
		58,7,0,0,0,57,55,1,0,0,0,57,56,1,0,0,0,58,18,1,0,0,0,59,67,7,0,0,0,60,
		62,7,0,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,
		66,1,0,0,0,65,63,1,0,0,0,66,68,7,0,0,0,67,63,1,0,0,0,67,68,1,0,0,0,68,
		20,1,0,0,0,69,70,7,1,0,0,70,22,1,0,0,0,8,0,24,31,34,40,57,63,67,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
